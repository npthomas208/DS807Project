
> library(jpeg)

> library(ggplot2)

> library(EnvStats)

> library(MASS)

> library(dbscan)

> library(factoextra)

> library(gam)

> library(flexmix)

> library(keras)

> library(tensorflow)

> library(dplyr)

> library(stringr)

> library(tfdatasets)

> library(tfruns)

> # Hyperparameter flags ---------------------------------------------------------
> 
> FLAGS <- flags(
+   flag_numeric("dropout1", 0.4), 
+   flag_n .... [TRUNCATED] 

> # Data Preparation -------------------------------------------------------------
> 
> use_condaenv("r-tensorflow")

> nn = list()

> nn$csv <- as.list(read.delim("./Images/train.csv") %>%
+                     mutate(class = as.factor(class)))

> nn$train=list()

> nn$train$y = array(as.numeric(nn$csv$class, levels(nn$csv$class))-1, dim = c(length(nn$csv$file), 1))

> nn$csv$image = rep(NA, length(nn$csv$file))

> for(i in 1:length(nn$csv$file)){
+   nn$csv$image[i] = list(as.integer(outer(readJPEG(paste("./Images/Train/", nn$csv$file[i], sep="")),  255)))
+ }

> nn$tarray <- function(x) aperm(x, seq_along(dim(x)))

> nn$train$x = nn$tarray(array(unlist(nn$csv$image), c(length(nn$csv$image),1024, 1024, 3)))

> nn <- list(train = nn$train)

> # Define Model -----------------------------------------------------------------
> 
> set.seed(1)

> nn$modelCNN = keras_model_sequential() %>%
+   layer_conv_2d(filters = 16, kernel_size = c(FLAGS$kernel1,FLAGS$kernel1), activation = "relu", input_ .... [TRUNCATED] 

> nn$modelDense = nn$modelCNN %>% 
+   layer_flatten() %>% 
+   layer_dense(units = 64, activation = "relu") %>% 
+   layer_dense(units = 2, activatio .... [TRUNCATED] 

> nn$model = nn$modelDense %>% compile(
+   optimizer = "adam",
+   loss = "sparse_categorical_crossentropy",
+   metrics = "accuracy"
+ )

> # Training & Evaluation --------------------------------------------------------
> set.seed(1)

> history <- nn$model %>% 
+   keras::fit(
+     x = nn$train$x, y = nn$train$y,
+     epochs = 10,
+     validation_split = 0.15,
+     verbose = 2
+ .... [TRUNCATED] 

> plot(history)

> # test data---------------------------------------------------------------------
> 
> nn$csv <- as.list(read.delim("./Images/test.csv", sep= ",") %> .... [TRUNCATED] 

> nn$test=list()

> nn$test$y = array(as.numeric(nn$csv$class, levels(nn$csv$class))-1, dim = c(length(nn$csv$file), 1))

> nn$test$x = rep(NA, length(nn$csv$file))

> for (i in 1:length(nn$csv$file)){
+   nn$test$x[i] <- list(image_to_array(image_load(paste("./Images/Test/", nn$csv$file[i], sep=""),target_size = c .... [TRUNCATED] 

> nn$test$x <- array(unlist(nn$test$x),c(7,1024,1024,3))

> print(max(nn$train$x[1,,,1]))
[1] 255

> print(max(nn$test$x[1,,,1]))
[1] 255

> nn = list(train = nn$train, test = nn$test, model = nn$model)

> nn$test$y
     [,1]
[1,]    0
[2,]    0
[3,]    0
[4,]    0
[5,]    0
[6,]    1
[7,]    1

> nn$model %>%
+   predict_classes(nn$test$x)
[1] 1 1 1 1 1 1 1
